---
title: "Metropolis Campaign"
format: 
  docx:
    reference-doc: F:/Aktenschrank/Analysen/R/quartotemplate.docx
number-sections: true
fig-dpi: 300
editor: visual
execute: 
  warning: false
---

## *Metropolis algorithm simulation*

*based on [Markov Chain Monte Carlo \| Columbia Public Health](https://www.publichealth.columbia.edu/research/population-health-methods/markov-chain-monte-carlo) with slightly changed assumptions (10 counties, pre-defined populations either systematically chosen or randomized) and these rules:*

1.  *Flip a coin. Heads to move east, tails to move west. If in borderline county, wrap around (alternative: move towards center?)*

2.  *If the district indicated by the coin (east or west) has more voters than the present district, move there.*

3.  *If the district indicated by the coin has fewer likely voters, make the decision based on a probability calculation:*

4.  *calculate the probability of moving as the ratio of the number of likely voters in the proposed district, to the number of voters in the current district:*

5.  *Pr\[move\] = voters in indicated district/voters in present district*

6.  *Take a random sample between 0 and 1.*

7.  *If the value of the random sample is between 0 and the probability of moving, move. Otherwise, stay put.*

```{r preparation}
#| layout-align: left
pacman::p_load(wrappedtools, tidyverse, ggrepel)

set.seed(1012)
counties <- tibble(County = LETTERS[1:9],
                   Population_defined=seq(from=10^4, 
                                  to= 9*10^4, 
                                  by=10^4),
                   Population_sampled = runif(n = 9,
                                              min = 10^4,
                                              max = 9*10^4) |> 
                     roundR(level = 3,
                            textout = F,
                            smooth = T))
pop_selected <- 'Population_sampled'
ggplot(counties,aes(County,.data[[pop_selected]]))+
  geom_col()

```

```{r rules}
move_selection <- function(.counties=counties, 
                           current_county,
                           which_population=pop_selected) {
  coinresult <- sample(x = c(1,-1),
                       size = 1)
  # if(current_county==1) {
  #   coinresult <- 1
  # }
  # if(current_county==nrow(.counties)) {
  #   coinresult <- -1
  # }
  next_county <- current_county+coinresult
  if(next_county==0) {next_county <- nrow(.counties)}
  if(next_county>nrow(counties)) {next_county <- 1}
  population_ratio <- .counties[[next_county,which_population]] /
    .counties[[current_county,which_population]]
  if(runif(n = 1,0,1)>population_ratio){
    next_county <- current_county
  }
  return(next_county)
}

n_moves <- 10^5
n_burnin <- 10^3
start_county <- 5
```

```{r data structure moves}
moves <- tibble(move=seq_len(n_moves),
                position=NA_integer_)
moves$position[1] <- start_county
```

```{r walks}
set.seed(1210)
for(step_i in 2:n_moves){
  moves$position[step_i] <- 
    move_selection(current_county = moves$position[step_i-1])
}
```

```{r no burnin filter all data}
visits <- moves |> 
  group_by(position) |> 
  summarise(Visits=n()) |> 
  ungroup() |> 
  mutate(County = LETTERS[position]) |> 
  select(-position) |> 
  full_join(counties)
ggplot(visits,aes(.data[[pop_selected]],Visits))+
  geom_smooth(method='lm')+
  geom_abline(intercept = 0,
              slope = n_moves/sum(counties[[pop_selected]]),
              linetype=2)+
  geom_point()+
  geom_label_repel(aes(label=County),nudge_x = 0, nudge_y = 100)+
  scale_shape_manual(values=LETTERS, guide = NULL)+
  scale_x_continuous(breaks=seq(0,10^5,10^4))+
    scale_y_continuous(breaks=seq(0,10^5,10^3))+
  ggtitle('All moves analyzed')
```

```{r after burnin}
visits <- moves |>
  filter(move>n_burnin) |> 
  group_by(position) |> 
  summarise(Visits=n()) |> 
  ungroup() |> 
  mutate(County = LETTERS[position]) |> 
  select(-position) |> 
  full_join(counties)
ggplot(visits,aes(.data[[pop_selected]],Visits))+
  geom_smooth(method='lm')+
  geom_abline(intercept = 0,
              slope = (n_moves-n_burnin)/sum(counties[[pop_selected]]),
              linetype=2)+
  geom_point()+
  geom_label_repel(aes(label=County),nudge_x = 0, nudge_y = 100)+
  scale_shape_manual(values=LETTERS, guide = NULL)+
  scale_x_continuous(breaks=seq(0,10^5,10^4))+
    scale_y_continuous(breaks=seq(0,10^5,10^3))+
  ggtitle('Only moves after burn-in analyzed')
```

```{r just burnin}
visits <- moves |>
  filter(move<=n_burnin) |> 
  group_by(position) |> 
  summarise(Visits=n()) |> 
  ungroup() |> 
  mutate(County = LETTERS[position]) |> 
  select(-position) |> 
  full_join(counties)
ggplot(visits,aes(.data[[pop_selected]],Visits))+
  geom_smooth(method='lm')+
  geom_abline(intercept = 0,
              slope = n_burnin/sum(counties[[pop_selected]]),
              linetype=2)+
  geom_point()+
  geom_label_repel(aes(label=County),nudge_x = 0, nudge_y = 10)+
  scale_shape_manual(values=LETTERS, guide = NULL)+
  scale_x_continuous(breaks=seq(0,10^5,10^4))+
    scale_y_continuous(breaks=seq(0,10^5,10^1))+
  ggtitle('Only burn-in moves analyzed')
```

```{r}
moves |> 
  filter(move<=n_burnin) |>
  ggplot(aes(move,position))+
  # geom_point()+
  geom_line()+
  scale_y_continuous(breaks=1:9,
                     labels = LETTERS[1:9])

moves |> 
  filter(move<=100) |>
  ggplot(aes(move,position))+
  # geom_point()+
  geom_line()+
  scale_y_continuous(breaks=1:9,
                     labels = LETTERS[1:9])
moves |> 
  filter(move>99000) |>
  ggplot(aes(move,position))+
  # geom_point()+
  geom_line()+
  scale_y_continuous(breaks=1:9,
                     labels = LETTERS[1:9])

moves |> 
  # filter(move<=n_burnin) |>
  ggplot(aes(move,position))+
  # geom_point()+
  geom_line()+
  scale_x_continuous(limits = c(1,30))+
  scale_y_continuous(breaks=1:9,
                     labels = LETTERS[1:9])

moves |> 
  # filter(move<=n_burnin) |>
  ggplot(aes(move,position))+
  # geom_point()+
  geom_line()+
  # scale_x_continuous(limits = c(1,30))+
  scale_y_continuous(breaks=1:9,
                     labels = LETTERS[1:9])+
  coord_cartesian(xlim=c(1,30))
```
